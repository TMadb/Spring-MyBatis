<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

  <!-- 配置SqlSessionFactory，用于生产SqlSession
       用于容器生成对象，所以需要放置MyBaytis的主配置文件路径
   -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
    <!-- 配置MyBatis的主配置文件路径 -->
    <property name="configLocation" value="classpath:mybatisconfig.xml"></property>
    <!-- 配置连接数据库的四大参数 -->
    <property name="dataSource" ref="datasource"></property>
  </bean>
  
  <!-- 配置dataSource(数据源) -->
  <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <!-- 配置数据库的四大连接参数 -->
   <property name="driverClass" value="${jdbc.driver}"></property>
   <property name="jdbcUrl" value="${jdbc.url}"></property> 
   <property name="user" value="${jdbc.username}"></property>
   <property name="password" value="${jdbc.password}"></property>
  </bean>
  
   <!-- 指定数据库配置文件的路径 -->
   <context:property-placeholder location="classpath:mysql.properties" />
   
   <!-- 配置自动扫描Dao下的包
        扫描到以后让SqlSessionFactory自动创建对象
        所以需要配置SqlSessionFacoty工厂的名称，指定由他来生产对象
    -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="com.org.dao"></property>
      <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- 配置Dao层实现类的Bean
         用设值注入的方式设值CourseDao对象
         容器自动生成的对象均是首字母小写，后面的不变
         特殊情况:当使用两个大写字母开头为类名时，容器返回的对象是原名
     -->
     <bean id="courseDaoImpl" class="com.org.dao.impl.CourseDaoImpl">
       <property name="courseDao" ref="courseDao"></property>
     </bean>
     
     <bean id="accountDaoImpl" class="com.org.dao.impl.AccountDaoImpl">
       <property name="accountDao" ref="accountDao"></property>
     </bean>
     <!-- 注解配置(自动扫描Dao层的包) -->
     <context:component-scan base-package="com.org.dao.impl" />
     
     <!-- aop的注解配置方式 -->
     <aop:aspectj-autoproxy />
     <!-- 配置目标对象 -->
     <bean id="man" class="com.org.aspect.ManPeople" />
     <!-- 配置切面类 -->
     <bean id="myAspect" class="com.org.aspect.MyOneAspect" />
     <!-- aop的配置文件配置方式 -->
     <!-- <aop:config>
      
         配置切入点 
              表达式 将切入点配置在何处
        
       <aop:pointcut expression="execution(* com.org.aspect.*.e(..))" id="EatPoint"/>
       <aop:pointcut expression="execution(* com.org.aspect.*.s(..))" id="SpeakPoint"/>
       配置切面
       <aop:aspect ref="myAspect">
         <aop:before method="before" pointcut="EatPoint" />
         <aop:around method="around" pointcut="SpeakPoint" />
       </aop:aspect>
     </aop:config> -->
     
     
     <!-- 配置的方式配置Spring-AOP的内置事务 -->
     <!-- 注册事务管理的核心类 -->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <!-- 配置数据源
            保证多个业务方法调用的是一个连接，使用之前已经配置好的c3P0连接池
        -->
       <property name="dataSource" ref="datasource" />
     </bean>
     
     <!-- 配置事务管理器代理，使用代理生成带有事务管理功能的目标对象 -->
     <bean id="ProxyService" 
     class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
       <!-- 要增强的目标对象 -->
       <property name="target" ref="accountDaoImpl" />
       <!-- 事务管理器 -->
       <property name="transactionManager" ref="transactionManager" />
       <!-- 事务属性 -->
       <property name="transactionAttributes">
       <!-- 指定给目标方法中满足条件的方法织入带有事务管理功能的增强对象
            AOP内置的事务不支持切入点表达式，但是支持简单的通配符配置
            需要认为指定事务的隔离级别和传播机制
            -Exception:因为Spring框架默认处理运行时异常(即程序运行时抛出异常的话内置的事务
            管理会回滚)，而受检时异常的话默认不处理(即程序发生异常不会回滚还是会提交)，所以需要加上
            这个参数
        -->
        <props>
          <prop key="transfer*">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,-Exception</prop>
        </props>
       </property>
     </bean>
     
     <!-- 注解的方式配置Spring-AOP的内置事务 -->
</beans>